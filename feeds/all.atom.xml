<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pythonic Perambulations</title><link href="http://jakevdp.github.io/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>http://jakevdp.github.io/</id><updated>2014-04-15T15:00:00-07:00</updated><entry><title>Hello World</title><link href="http://jakevdp.github.io/blog/2014/04/15/hello-world/" rel="alternate"></link><updated>2014-04-15T15:00:00-07:00</updated><author><name>Anand Gadiyar</name></author><id>tag:jakevdp.github.io,2014-04-15:blog/2014/04/15/hello-world/</id><summary type="html">

&lt;p&gt;Welcome to this blog. This is just a placeholder for now.&lt;/p&gt;
&lt;p&gt;I'll blog on certain topics (list of topics...).
&lt;/p&gt;</summary></entry><entry><title>Migrating from Octopress to Pelican</title><link href="http://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/" rel="alternate"></link><updated>2013-05-07T17:00:00-07:00</updated><author><name>Anand Gadiyar</name></author><id>tag:jakevdp.github.io,2013-05-07:blog/2013/05/07/migrating-from-octopress-to-pelican/</id><summary type="html">

&lt;p&gt;After nine months on Octopress, I've decided to move on.&lt;/p&gt;
&lt;p&gt;I should start by saying that Octopress is a great platform for static
blogging: it's powerful, flexible, well-supported, well-integrated with
GitHub pages, and has tools and plugins to do just about anything you might
imagine.  There's only one problem:&lt;/p&gt;
&lt;p&gt;It's written in Ruby.&lt;/p&gt;
&lt;p&gt;Now I don't have anything against Ruby per se.  However, it was starting to
seem a bit awkward that a blog called &lt;em&gt;Pythonic Perambulations&lt;/em&gt;
was built with Ruby, especially given the availability of so many
excellent Python-based static site generators
(&lt;a href="http://hyde.github.io/"&gt;Hyde&lt;/a&gt;,
&lt;a href="http://nikola.ralsina.com.ar/"&gt;Nikola&lt;/a&gt;,
and &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt; in particular).&lt;/p&gt;
&lt;p&gt;Additionally, a few things with Octopress were starting to become difficult:

first, I wanted a way to easily insert IPython notebooks into posts.
Sure, I developed a &lt;a href="/blog/2012/10/04/blogging-with-ipython/"&gt;hackish solution&lt;/a&gt;
to notebooks in Octopress which had worked
well enough for a while, but a cleaner method would have involved
digging into the Ruby source code and writing a full-fledged Octopress
extension, based on nbconvert.  This would have involved a fair bit of effort
to learn Ruby and figure out how to best interface it with the Python nbconvert
code. Second, Ruby has so many strange and difficult pieces:
GemFiles, RVM, rake... and I never took the time to really understand
the real purpose of all of them (self-reflection:
what parts of Python would seem strange and difficult if I hadn't
been using them for so many years?).  The black-box nature of the process,
at least in my own case, was starting to bother me.&lt;/p&gt;
&lt;p&gt;But the kicker was this: In January I got a new computer, and after a reasonable
amount of effort was unable to successfully build my blog.  I've been writing
my posts exclusively on my old laptop which I somehow managed to successfully
set up last August.  But that laptop now has a sorely outdated Ubuntu distro
that I couldn't upgrade for fear of losing the ability to update my blog.
Needless to say, this was not the most effective setup.&lt;/p&gt;
&lt;p&gt;It was time to switch my blog engine to Python.&lt;/p&gt;
&lt;h2&gt;Choosing a Python Static Generator&lt;/h2&gt;
&lt;p&gt;I started asking around, and found that there were three solid contenders for
a Python-based platform to replace Octopress: &lt;a href="http://hyde.github.io/"&gt;Hyde&lt;/a&gt;,
&lt;a href="http://nikola.ralsina.com.ar/"&gt;Nikola&lt;/a&gt;,
and &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;.  I gave Hyde a test-run a few weeks ago
in re-making my &lt;a href="http://www.astro.washington.edu/users/vanderplas"&gt;website&lt;/a&gt;,
and I really like it: it's clean, straightforward, powerful, and easy to use.
The documentation is a bit lacking, though, and I think it would take a fair
bit more effort at this point to build a more complicated site with Hyde.&lt;/p&gt;
&lt;p&gt;Nikola and Pelican both seem to be well-loved by their users, but I had to
choose one.  I went with Pelican for one simple reason:
it has more GitHub forks.  I'm sure this is entirely
unfair to Nikola and all the contributors who have poured
their energy into the project, but I had to choose one way or another.
I'm pleased to say that Pelican has not been a disappointment:
I've found it to be flexible and powerful.  It has an active developer-base,
and makes available a wide array of themes and plugins.
For the few extra pieces I needed, I found the plugin and theming
API to be well-documented and straightforward to use.&lt;/p&gt;
&lt;h2&gt;Migrating to Pelican from Octopress&lt;/h2&gt;
&lt;p&gt;I won't attempt to write a one-size-fits-all guide to migrating to Pelican
from Octopress: there are too many possibile combinations of formats, plugins,
themes, etc.  But I will walk through my own process in some detail, in hopes
that it might help others who find themselves in a similar predicament.&lt;/p&gt;
&lt;p&gt;I had several goals when doing this migration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wanted, as much as possible, to maintain the look and feel of the blog.
  I like the default Octopress theme: it's simple, clean, compact, and
  includes all the aspects I need for a good blog.&lt;/li&gt;
&lt;li&gt;I wanted, as much as possible, to leave the source of my posts unmodified:
  luckily Pelican supports writing posts in markdown and allows easy insertion
  of custom plugins, so this was relatively easy to accommodate.&lt;/li&gt;
&lt;li&gt;I wanted to maintain the history of Disqus comments for each page, as well
  as the Twitter and Google Pages tools.&lt;/li&gt;
&lt;li&gt;I wanted, as much as possible, to maintain the same URLs for all content,
  including posts, notebooks, images, and videos.&lt;/li&gt;
&lt;li&gt;I wanted a clean way to insert html-formatted IPython notebooks into blog
  posts. Nearly half my posts are written as notebooks, and the
  &lt;a href="/blog/2012/10/04/blogging-with-ipython/"&gt;old way&lt;/a&gt; of including them
  was becoming much too cumbersome.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was able to suitably address all these goals with Pelican
in a few evenings' effort.  Some of it was already
built-in to the Pelican settings architecture, some required
customization of themes and extensions, and some required writing some brand
new plugins.  I'll summarize these aspects below:&lt;/p&gt;
&lt;h3&gt;Blog theme&lt;/h3&gt;
&lt;p&gt;As I mentioned, I wanted to keep the look and feel of the blog consistent.
Luckily, someone had gone before me and created an
&lt;a href="https://github.com/duilio/pelican-octopress-theme"&gt;octopress Pelican theme&lt;/a&gt;
which did most of the heavy lifting.  I contributed
a few additional features, including the ability to
&lt;a href="https://github.com/duilio/pelican-octopress-theme/pull/12"&gt;specify Disqus tags&lt;/a&gt;
and maintain comment history, to
&lt;a href="https://github.com/duilio/pelican-octopress-theme/pull/11"&gt;add Twitter, Google Plus, and Facebook&lt;/a&gt; links in the sidebar and footer,
to add a &lt;a href="https://github.com/duilio/pelican-octopress-theme/pull/15"&gt;custom site search&lt;/a&gt;
box which appears in the upper right of the
navigation panel, as well as a few
&lt;a href="https://github.com/duilio/pelican-octopress-theme/pull/14"&gt;other&lt;/a&gt;
&lt;a href="https://github.com/duilio/pelican-octopress-theme/pull/13"&gt;tweaks&lt;/a&gt;.
The result is what you see here: nearly identical to the old layout, with
all the bells and whistles included.&lt;/p&gt;
&lt;h3&gt;Octopress Markdown to Pelican Markdown&lt;/h3&gt;
&lt;p&gt;Octopress has a few plugins which add some syntactic sugar to the markdown
language.  These are tags specified in
&lt;a href="https://github.com/Shopify/liquid"&gt;Liquid&lt;/a&gt;-style syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have made extensive use of these in my octopress posts, primarily to insert
videos, images, and code blocks from file.
In order to accommodate this in Pelican, I wrote
a &lt;a href="https://github.com/getpelican/pelican-plugins/pull/21"&gt;Pelican plugin&lt;/a&gt;
which wraps a custom Markdown preprocessor written via the
&lt;a href="http://pythonhosted.org/Markdown/extensions/api.html"&gt;Markdown extension API&lt;/a&gt;
which can correctly interpret these types of tags.  The tags ported from
octopress thus far are:&lt;/p&gt;
&lt;h4&gt;The Image Tag&lt;/h4&gt;
&lt;p&gt;The image tag allows insertion of an image into the post with a
specified size and position:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is an example of the result of the image tag:&lt;/p&gt;
&lt;p&gt;&lt;img height="200" width="300" alt="A Galaxy" title="A Galaxy" src="/images/galaxy.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;The Video Tag&lt;/h4&gt;
&lt;p&gt;The video tag allows embedding of an HTML5/Flash-compatible video
into the post:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mp4&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;poster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is an example of the output of the video tag:&lt;/p&gt;
&lt;p&gt;&lt;video width='240' height='180' preload='none' controls poster='/downloads/videos/animate_square.png'&gt;&lt;source src='/downloads/videos/animate_square.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;(see &lt;a href="/blog/2012/09/26/optical-illusions-in-matplotlib/"&gt;this post&lt;/a&gt; for a
description of this video).&lt;/p&gt;
&lt;h4&gt;The Code Include Tag&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;include_code&lt;/code&gt; tag allows the insertion of formatted lines from
a file into the post, with a title and a link to the source file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;include_code&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is an example of the output of the code include tag:&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption&gt;&lt;span&gt;Hello World hello_world.py&lt;/span&gt; &lt;a href='/downloads/code/hello_world.py'&gt;download&lt;/a&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello_world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;For more information on using these tags, refer to the
&lt;a href="https://github.com/getpelican/pelican-plugins/pull/21"&gt;module doc-strings&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Maintaining Disqus Comment Threads&lt;/h3&gt;
&lt;p&gt;Static blogs are fast, lightweight, and easy to deploy.  A disadvantage, though,
is the inability to natively include dynamic elements such as comment threads.
&lt;a href="http://disqus.com/"&gt;Disqus&lt;/a&gt;
is a third-party service that skirts this disadvantage very
seamlessly.  All it takes is to add a small javascript snippet with some
identifiers in the appropriate place on your page, and Disqus takes care of
the rest.  To keep the comment history on each page required assuring that
the site identifier and page identifiers remained the same between blog
versions.  This part happens within the theme, and my
&lt;a href="https://github.com/duilio/pelican-octopress-theme/pull/12"&gt;Disqus PR&lt;/a&gt;
to the Pelican Octopress theme made this work correctly.&lt;/p&gt;
&lt;h3&gt;Maintaining the URL structure&lt;/h3&gt;
&lt;p&gt;By default, Octopress stores posts with a structure looking like
&lt;code&gt;blog/YYYY/MM/DD/article-slug/&lt;/code&gt;.  The Pelican default is different, but
easy enough to change.  In the &lt;code&gt;pelicanconf.py&lt;/code&gt;
settings file, this corresponds to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:%&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:%&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:%&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:%&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, at the top of the markdown file for each article, the metadata needs
to be slightly modified from the form used by Octopress -- here is the
actual metadata used in the document that generates this page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Migrating&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Octopress&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;migrating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;octopress&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Additionally, the static elements of the blog (images, videos, IPython
notebooks, code snippets, etc.) must be put within the correct directory
structure.  These static files should be put in paths which are specified
via the &lt;code&gt;STATIC_PATHS&lt;/code&gt; setting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;figures&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;downloads&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican presented a challenge here: as of the time of this
writing, Pelican has a hard-coded &lt;code&gt;'static'&lt;/code&gt; subdirectory where these
static paths are saved.  I submitted a
&lt;a href="https://github.com/getpelican/pelican/pull/875"&gt;pull request&lt;/a&gt; to Pelican
that replaces this hard-coded setting with a configurable path: because
the change conflicts with a
&lt;a href="https://github.com/getpelican/pelican/pull/795"&gt;bigger refactoring&lt;/a&gt;
of the code which is ongoing, the PR will not be merged.  But until this
new refactoring is finished, I'll be using
&lt;a href="https://github.com/jakevdp/pelican/tree/specify-static"&gt;my own branch&lt;/a&gt;
of Pelican to make this blog, and specify the correct static paths.&lt;/p&gt;
&lt;h3&gt;Inserting Notebooks&lt;/h3&gt;
&lt;p&gt;The ability to seamlessly insert IPython notebooks into posts was one of the
biggest drivers of my switch to Pelican.  Pelican has an
&lt;a href="http://danielfrg.github.io/blog/2013/03/08/pelican-ipython-notebook-plugin/"&gt;ipython notebook plugin&lt;/a&gt;
available, but I wasn't completely happy with it.  The plugin implements
a reader which treats the notebooks themselves as the source of a post,
leading to the requirement to insert blog metadata into the notebook itself.
This is a suitable solution, but for my own purposes I much prefer a solution
in which the content of a notebook could be inserted into a stand-alone post,
such that the notebook and the blog metadata are completely separate.&lt;/p&gt;
&lt;p&gt;To accomplish this, I added a submodule to my
&lt;a href="https://github.com/jakevdp/pelican-plugins/blob/liquid_tags/liquid_tags/notebook.py"&gt;liquid_tags&lt;/a&gt; Pelican plugin which allows the insertion of notebooks
using the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;notebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipynb&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This inserts the notebook at the given location in the post, optionally
selecting a given range of notebook cells with standard Python list slicing
syntax.&lt;/p&gt;
&lt;p&gt;The formatting of notebooks requires some special CSS styles which must
be inserted into the header of each page where notebooks are shown.  Rather
than requiring the theme to be customized to support notebooks, I decided
on a solution where an &lt;code&gt;EXTRA_HEADER&lt;/code&gt; setting is used to specify html
and CSS which
should be added to the header of the main page.  The notebook plugin
saves the required header to a file called &lt;code&gt;_nb_header.html&lt;/code&gt; within
the main source directory.  To
insert the appropriate formatting, we add the following lines to the
settings file, &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;EXTRA_HEADER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;_nb_header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the theme file, within the header tag, we add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;EXTRA_HEADER&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;EXTRA_HEADER&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the result: a short notebook inserted directly into the post:&lt;/p&gt;
&lt;p&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="This-Is-An-IPython-Notebook"&gt;This Is An IPython Notebook&lt;a class="anchor-link" href="#This-Is-An-IPython-Notebook"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Here is some code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[1]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stdout"&gt;
&lt;pre&gt;
[ 0.25463203  0.55637185  0.02743774  0.57380221  0.52378531  0.95099357
  0.70975568  0.19575853  0.589227    0.06959599]

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Here is some math:&lt;/p&gt;
&lt;p&gt;\[e^{i\pi} + 1 = 0\]&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;With all those things in place, the blog was ready to be built.  The result
is right in front of you: you're reading it.  If you'd like to see the source
from which this blog built, it's available at
&lt;a href="http://www.github.com/jakevdp/PythonicPerambulations"&gt;http://www.github.com/jakevdp/PythonicPerambulations&lt;/a&gt;.  Feel free to adapt the configurations and theme
to suit your own needs.&lt;/p&gt;
&lt;p&gt;I'm glad to be working purely in Python from now on!&lt;/p&gt;</summary></entry></feed>